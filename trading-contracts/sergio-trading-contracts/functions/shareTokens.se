# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:_, changeMode:[int256]:int256, emergencyStop:[]:int256, getMode:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256,int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:_, transferOwnership:[int256,int256,int256,int256]:int256, updateController:[int256,int256]:int256]

### Token wrapper for shares

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')

data accounts[2**160](balance, spenders[2**160](maxValue))

data controller

data totalSupply
# token name for display
data name
# token symbol for display
data symbol
# amount of decimals per unit of shares
data decimals

event Transfer(from: address: indexed, to: address: indexed, value: uint256)
event Approval(owner: address: indexed, spender: address: indexed, value: uint256)

def init():
    self.controller = 0x0
    self.name = "Shares"
    self.symbol = "SHARE"
    self.decimals = 18

####################
# Public functions #
####################

def transfer(to: address, value: uint256):
    refund()
    senderBalance = self.accounts[msg.sender].balance
    if(senderBalance < value):
        ~invalid()
    if(!safeToSubtract(senderBalance, value)):
        ~invalid()
    if(!safeToAdd(self.accounts[to].balance, value)):
        ~invalid()
    # Update balances
    self.accounts[msg.sender].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, msg.sender, to, value)
    return(1)

def transferFrom(from: address, to: address, value: uint256):
    refund()
    senderBalance = self.accounts[from].balance
    if(senderBalance < value):
        ~invalid()
    if(value > self.accounts[from].spenders[msg.sender].maxValue):
        ~invalid()
    if(!safeToSubtract(senderBalance, value)):
        ~invalid()
    if(!safeToAdd(self.accounts[to].balance, value)):
        ~invalid()
    self.accounts[from].spenders[msg.sender].maxValue -= value
    # Update balances
    self.accounts[from].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, from, to, value)
    return(1)

def approve(spender: address, value: uint256):
    refund()
    self.accounts[msg.sender].spenders[spender].maxValue = value
    log(type=Approval, msg.sender, spender, value)
    return(1)

######################
# Internal functions #
######################

# Special functions for share (token) creation and destruction

def createShares(owner: address, fxpValue: uint256):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    if(fxpValue <= 0):
        ~invalid()
    self.accounts[owner].balance += fxpValue
    self.totalSupply += fxpValue
    return(1)

def destroyShares(owner: address, fxpValue: uint256):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    if(fxpValue <= 0):
        ~invalid()
    if(self.accounts[owner].balance < fxpValue):
        ~invalid()
    self.accounts[owner].balance -= fxpValue
    self.totalSupply -= fxpValue
    return(1)

####################
# Getter functions #
####################

# Returns amount spender can withdraw from owner
# @return fxp
def allowance(owner: address, spender: address):
    refund()
    return(self.accounts[owner].spenders[spender].maxValue)

# @return fxp
def totalSupply():
    refund()
    return(self.totalSupply)

# @return fxp
def balanceOf(address: address):
    refund()
    return(self.accounts[address].balance)

def getName():
    refund()
    return(self.name)

def getDecimals():
    refund()
    return(self.decimals)

def getSymbol():
    refund()
    return(self.symbol)

########################
# Controller functions #
########################

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)