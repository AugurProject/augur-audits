# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:_, changeMode:[int256]:int256, emergencyStop:[]:int256, getMode:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256,int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:_, transferOwnership:[int256,int256,int256,int256]:int256, updateController:[int256,int256]:int256]

inset('../macros/refund.sem')

# Topics[] is indexed by branch ID
#   numTopics is the number of distinct topics on the branch
#   topics[] is an array with all distinct topics in this branch
#   popularity[] is indexed by topic, values are the total "popularity" of all markets using the topic.
#       (Volume is a crude popularity metric which will be refined by testing.)
# Note: sorting and/or ranking must be done by the client!
data Topics[](numTopics, topics[], popularity[])

data controller

def init():
    self.controller = 0x0

def updateTopicPopularity(branch, topic, fxpAmount):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    if(self.Topics[branch].popularity[topic] == 0):
        self.Topics[branch].topics[self.Topics[branch].numTopics] = topic
        self.Topics[branch].numTopics += 1
    self.Topics[branch].popularity[topic] += fxpAmount
    return(1)

def getTopicsInBranch(branch, offset, numTopicsToLoad):
    numTopics = self.Topics[branch].numTopics
    if(offset > numTopics or numTopics == 0):
        return([]: arr)
    if(numTopicsToLoad == 0):
        numTopicsToLoad = numTopics
    numTopicsToLoad = min(numTopicsToLoad, numTopics - offset)
    topicsInBranch = array(numTopicsToLoad)
    i = 0
    while(i < numTopicsToLoad):
        topicsInBranch[i] = self.Topics[branch].topics[i + offset]
        i += 1
    return(topicsInBranch: arr)

def getTopicsInfo(branch, offset, numTopicsToLoad):
    numTopics = self.Topics[branch].numTopics
    if(offset > numTopics or numTopics == 0):
        return([]: arr)
    if(numTopicsToLoad == 0):
        numTopicsToLoad = numTopics
    numTopicsToLoad = min(numTopicsToLoad, numTopics - offset)
    topicsInfo = array(numTopicsToLoad * 2)
    i = 0
    j = 0
    while(i < numTopicsToLoad):
        topic = self.Topics[branch].topics[i + offset]
        topicsInfo[j] = topic
        topicsInfo[j + 1] = self.Topics[branch].popularity[topic]
        i += 1
        j += 2
    return(topicsInfo: arr)

# @return fxp
def getTopicPopularity(branch, topic):
    return(self.Topics[branch].popularity[topic])

def getNumTopicsInBranch(branch):
    return(self.Topics[branch].numTopics)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)