# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:_, changeMode:[int256]:int256, emergencyStop:[]:int256, getMode:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256,int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:_, transferOwnership:[int256,int256,int256,int256]:int256, updateController:[int256,int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

### Token wrapper for eth, which allows eth deposits and faucet usage for testing

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data accounts[2**160](balance, spenders[2**160](maxValue))

data totalSupply
# token name for display
data name
# token symbol for display
data symbol
# amount of decimals per unit of rep
data decimals
# timestamp when withdraw was initiated
data initiated[]
data controller

event Transfer(from: address: indexed, to: address: indexed, value: uint256)
event Approval(owner: address: indexed, spender: address: indexed, value: uint256)
event DepositEther(sender: address: indexed, value: uint256, balance: uint256, timestamp: uint256)
event WithdrawEther(sender: address: indexed, value: uint256, balance: uint256, timestamp: uint256)
event InitiateWithdrawEther(sender: address: indexed, value: uint256, balance: uint256, timestamp: uint256)

def init():
    self.controller = 0x0
    self.name = "Cash"
    self.symbol = "CASH"
    self.decimals = 18

####################
# Public functions #
####################

def transfer(to: address, value: uint256):
    refund()
    self.controller.stopInEmergency()
    senderBalance = self.accounts[msg.sender].balance
    if(senderBalance < value):
        ~invalid()
    if(!safeToSubtract(senderBalance, value)):
        ~invalid()
    if(!safeToAdd(self.accounts[to].balance, value)):
        ~invalid()
    # Update balances
    self.accounts[msg.sender].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, msg.sender, to, value)
    return(1)

def transferFrom(from: address, to: address, value: uint256):
    refund()
    self.controller.stopInEmergency()
    senderBalance = self.accounts[from].balance
    if(senderBalance < value):
        ~invalid()
    if(value > self.accounts[from].spenders[msg.sender].maxValue):
        ~invalid()
    if(!safeToSubtract(senderBalance, value)):
        ~invalid()
    if(!safeToAdd(self.accounts[to].balance, value)):
        ~invalid()
    self.accounts[from].spenders[msg.sender].maxValue -= value
    # Update balances
    self.accounts[from].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, from, to, value)
    return(1)

def approve(spender: address, value: uint256):
    refund()
    self.controller.stopInEmergency()
    self.accounts[msg.sender].spenders[spender].maxValue = value
    log(type=Approval, msg.sender, spender, value)
    return(1)

def publicDepositEther():
    MUTEX.acquire()
    self.controller.stopInEmergency()
    self.depositEther(msg.sender, value = msg.value)
    MUTEX.release()
    return(1)

def publicWithdrawEther(to: address, value: uint256):
    refund()
    MUTEX.acquire()
    self.withdrawEther(msg.sender, to, value)
    MUTEX.release()
    return(1)

######################
# Internal functions #
######################

def depositEther(sender: address):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    amount = msg.value
    if(!safeToAdd(amount, self.accounts[sender].balance)):
        ~invalid()
    if(!safeToAdd(amount, self.totalSupply)):
        ~invalid()
    self.accounts[sender].balance += amount
    self.totalSupply += amount
    log(type = DepositEther, sender, amount, self.accounts[sender].balance, block.timestamp)
    return(1)

def withdrawEther(sender: address, to: address, value: uint256):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    # TODO: add support for emergency stop
    initiatedTimestamp = self.initiated[sender]
    if(self.accounts[sender].balance < value):
        ~invalid()
    if(!safeToSubtract(self.accounts[sender].balance, value)):
        ~invalid()
    if(!safeToSubtract(self.totalSupply, value)):
        ~invalid()
    if(!initiatedTimestamp):
        self.initiated[sender] = block.timestamp
        log(type = InitiateWithdrawEther, sender, value, self.accounts[sender].balance, block.timestamp)
        return(2)
    else:
        if((initiatedTimestamp + 3 * SECONDS_PER_DAY) > block.timestamp):
            ~invalid()
        self.accounts[sender].balance -= value
        self.totalSupply -= value
        if(!send(to, value)):
            ~invalid()
        self.initiated[sender] = 0
        log(type = WithdrawEther, sender, value, self.accounts[sender].balance, block.timestamp)
        return(1)

####################
# Getter functions #
####################

# Returns amount spender can withdraw from owner
# @return fxp
def allowance(owner: address, spender: address):
    refund()
    return(self.accounts[owner].spenders[spender].maxValue)

# @return fxp
def totalSupply():
    refund()
    return(self.totalSupply)

# @return fxpValue
def balanceOf(address: address):
    refund()
    return(self.accounts[address].balance)

def getName():
    refund()
    return(self.name)

def getDecimals():
    refund()
    return(self.decimals)

def getSymbol():
    refund()
    return(self.symbol)

def getInitiated():
    refund()
    return(self.initiated[msg.sender])

########################
# Controller functions #
########################

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)