# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [addToWhitelist:[int256]:int256, assertIsWhitelisted:[int256]:int256, assertOnlySpecifiedCaller:[int256,int256]:_, changeMode:[int256]:int256, emergencyStop:[]:int256, getMode:[]:int256, getOwner:[]:int256, lookup:[int256]:int256, onlyInEmergency:[]:_, release:[]:int256, removeFromWhitelist:[int256,int256]:int256, setValue:[int256,int256]:int256, stopInEmergency:[]:_, suicide:[int256,int256,int256]:int256, switchModeSoOnlyEmergencyStopsAndEscapeHatchesCanBeUsed:[]:_, transferOwnership:[int256,int256,int256,int256]:int256, updateController:[int256,int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOriginalTradingPeriod:[int256]:int256, getOutcomeShareContract:[int256,int256]:int256, getOutcomeShareWallet:[int256,int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:uint256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[],int256[]]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

ORDERS = self.controller.lookup('orders')
extern orders: [addOrderToMarket:[int256,int256]:int256, cancelOrderLog:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, completeSetsLog:[int256,int256,int256,int256,int256,int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getID:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getOrder:[int256]:int256[], getOrderIDs:[int256]:int256[], getOrderOwner:[int256]:int256, getPrevID:[int256,int256]:int256, getPrice:[int256]:int256, getTotalOrders:[int256]:int256, getType:[int256]:int256, getVolume:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, modifyMarketVolume:[int256,int256]:int256, removeOrder:[int256]:int256, removeOrderFromMarket:[int256,int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, setController:[address]:int256, setPrice:[int256,int256,int256]:int256, suicideFunds:[address]:_, takeAskOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256]:int256, takeBidOrderLog:[address,address,address,int256,uint256,address,uint256,uint256,uint256,uint256,uint256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:address, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setController:[address]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256, suicideFunds:[address]:_]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

### This allows you to cancel orders on the book

extern wallet: [initialize:[int256]:int256, setController:[address]:int256, suicideFunds:[address]:_, transfer:[address,uint256]:int256]

# Warning: subcurrencies/tokens are untrusted contracts
extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')

data controller

# Order types
macro BID: 1
macro ASK: 2

# Field counts
macro ORDER_FIELDS: 10

def init():
    self.controller = 0x0

# @public
def publicCancelOrder(orderID):
    refund()
    MUTEX.acquire()
    self.cancelOrder(msg.sender, orderID)
    MUTEX.release()
    return(1)

# Cancellation: cancels an order, if a bid refunds money, if an ask returns shares
# @internal
# @returns 1 if success, throws on failure
def cancelOrder(sender: address, orderID):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    if(orderID == 0):
        ~invalid()

    # Look up the order the sender wants to cancel
    order = ORDERS.getOrder(orderID, outitems = ORDER_FIELDS)
    type = order[1]
    market = order[2]
    fxpAmount = order[3]
    fxpPrice = order[4]
    owner = order[5]
    outcome = order[7]
    fxpMoneyEscrowed = order[8]
    fxpSharesEscrowed = order[9]

    # Check that the order ID is correct, the type is bid (1) or ask (2),
    # and that the sender owns the order
    if(order[0] != orderID):
        ~invalid()
    if(type != BID and type != ASK):
        ~invalid()
    if(sender != owner):
        ~invalid()

    # Clear the order first
    ORDERS.removeOrder(orderID)
    ORDERS.removeOrderFromMarket(market, orderID)

    self.refundOrder(sender, type, fxpSharesEscrowed, fxpMoneyEscrowed, market, outcome)

    # Log cancellation
    ORDERS.cancelOrderLog(market, sender, fxpPrice, fxpAmount, orderID, outcome, type, fxpMoneyEscrowed, fxpSharesEscrowed)
    return(1)

# Issue refunds
# @private
def refundOrder(sender: address, type: uint256, fxpSharesEscrowed: uint256, fxpMoneyEscrowed: uint256, market: address, outcome: uint256):
    refund()
    if(msg.sender != self):
        ~invalid()

    if(fxpSharesEscrowed > 0):
        # Return to user sharesEscrowed that weren't filled yet for all outcomes except the order outcome
        if(type == BID):
            i = 1
            while(i <= MARKETS.getMarketNumOutcomes(market)):
                if(i != outcome):
                    MARKETS.getOutcomeShareWallet(market, i).transfer(sender, fxpSharesEscrowed)
                i += 1
        # Shares refund if has shares escrowed for this outcome
        elif(type == ASK):
            MARKETS.getOutcomeShareWallet(market, outcome).transfer(sender, fxpSharesEscrowed)

    # Return to user moneyEscrowed that wasn't filled yet
    if(fxpMoneyEscrowed > 0):
        if(!INFO.getWallet(market).transfer(sender, fxpMoneyEscrowed)):
            ~invalid()

    return(1)

def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)